#include "pch.h"
#include <iostream>
#include "time.h"
#include "string"
#include <Windows.h>
#include <random>
#include <vector>


using namespace std;

class mapa
{

private:
	vector<string>litery;
	string Plansza[12][12];
	vector<vector<pair<int, int>>>pamiec;
	
public:

	mapa()// ustawia plansze pelna 0
	{
		for (int i = 0; i < 12; i++) {
			for (int y = 0; y < 12; y++) {

				Plansza[i][y] = "0";
			}
		}
		set_vector_litery();
	}

	void set_vector_litery()// uzywane do obramowki // design
	{
		litery.push_back("Wypelniacz");
		litery.push_back("A");
		litery.push_back("B");
		litery.push_back("C");
		litery.push_back("D");
		litery.push_back("E");
		litery.push_back("F");
		litery.push_back("G");
		litery.push_back("H");
		litery.push_back("I");
		litery.push_back("J");
	}
	
	vector<pair<int, int>> re_pamiec(int i) 
	{
		return pamiec[i];
	}

	string dekonwerter(int x)//mowi graczowi gdzie bot strzelil konwertujac cyfre na litere
	{
		if (x == 1) { return "A"; }
		if (x == 2) { return "B"; }
		if (x == 3) { return "C"; }
		if (x == 4) { return "D"; }
		if (x == 5) { return "E"; }
		if (x == 6) { return "F"; }
		if (x == 7) { return "G"; }
		if (x == 8) { return "H"; }
		if (x == 9) { return "I"; }
		if (x == 10) { return "J"; }
		else return"BLAD!";
	}

	int konwenter(string x) // konwertuje litere na cyfre (wspolrzedne)
	{
		if (x == "A") { return 1; }
		if (x == "B") { return 2; }
		if (x == "C") { return 3; }
		if (x == "D") { return 4; }
		if (x == "E") { return 5; }
		if (x == "F") { return 6; }
		if (x == "G") { return 7; }
		if (x == "H") { return 8; }
		if (x == "I") { return 9; }
		if (x == "J") { return 10; }
		else
		{
			cout << "Litery od A-J" << endl;
			return 69;
		}
	}

	vector<pair<int, int>> znajdz_w_pamieci(int x, int y) 
	{
		int numer_statku=0;
		for (size_t j = 0; j < pamiec.size(); j++)
		{
			for (size_t i = 0; i < pamiec[j].size(); i++)
			{

				if (x == pamiec[j][i].first && y == pamiec[j][i].second)
				{
					numer_statku = j;
				}
			}
		}
		return	 pamiec[numer_statku];
	}

	void showpamiec() /// metoda do uzytku programisty// debagowanie
	{
		for (size_t j = 0; j < pamiec.size(); j++)
		{
			for (size_t i = 0; i < pamiec[j].size(); i++)
			{
				cout << pamiec[j][i].first;
				cout << pamiec[j][i].second;
				cout << endl;
			}
		}
	}

	int get_rand2()
	{
		random_device rd;
		std::mt19937 mt(rd());
		std::uniform_int_distribution<std::mt19937::result_type> dist(0, 1);
		return dist(mt);
	}

	int get_rand()
	{
		random_device rd;
		std::mt19937 mt(rd());
		std::uniform_int_distribution<std::mt19937::result_type> dist(1, 10);
		return dist(mt);
	}

	int check(int x, int y)
	{
		if (Plansza[x][y] == "0")
		{
			return 0;// pudlo//puste pole
		}
		if (Plansza[x][y] == "X")//juz trafione 
		{
			return 3; ///juztrafione
		}
		if (Plansza[x][y] == "*")
		{
			return 1;// niedozwolone powtarzanie strzalow//puste
		}
		else
			return 2;//traf
	}

	void setPudlo(int x, int y)
	{

		Plansza[x][y] = "*";
	}

	void setTraf(int x, int y)
	{

		Plansza[x][y] = "X";
	}

	void showplansza()
	{
		cout << "X 1 2 3 4 5 6 7 8 9 10" << endl;

		for (int i = 1; i < 11; i++)
		{
			cout << litery[i] << " ";
			for (int y = 1; y < 11; y++)
			{
				cout << Plansza[y][i];
				cout << " ";
			}
			cout << endl;
		}
		cout << endl;
	}

	void set_rand_mapa() //Procedura rozpoczecia losowanania mapy
	{
		losowanie(6);
		losowanie(4);
		losowanie(4);
		losowanie(3);
		losowanie(3);
		losowanie(2);
		losowanie(2);

	}

	void losowanie(int rozmiar){
	
		int good = 0;
		do
		{
			int p = get_rand2();///pozycja los 
			int x = get_rand();/// x los (1-10)
			int y = get_rand();///y los (1-10)

			good = rozmieszczanie_statkow(x, y, p, rozmiar);
			
		} while (good == 0);
	
	}

	void statek(int rozmiar) 
	{
		if (rozmiar == 6) {	cout << " Tworzenie Lotniskowiec 1x6 ";}
		if (rozmiar == 4) { cout << " Tworzenie Pancernik 1x4 " ; }
		if (rozmiar == 3) { cout << " Tworzenie Krazownik 1x3"; }
		if (rozmiar == 2) { cout << " Tworzenie Niszczyciel 1x2"; }
	}

	void wybierz_literke(int x,int y,int para ,int rozmiar,int p) // ustawia statki wedlug kryteriow
	{
		if (p == 0) {
			if (rozmiar == 6)
			{
				Plansza[x + para][y] = "L";
			}
			if (rozmiar == 4) {
				Plansza[x + para][y] = "P";
			}
			if (rozmiar == 3) {
				Plansza[x + para][y] = "K";
			}
			if (rozmiar == 2) {
				Plansza[x + para][y] = "N";
			}
		}
		else {
			if (rozmiar == 6)
			{
				Plansza[x][y+para] = "L";
			}
			if (rozmiar == 4) {
				Plansza[x][y+ para] = "P";
			}
			if (rozmiar == 3) {
				Plansza[x ][y+ para] = "K";
			}
			if (rozmiar == 2) {
				Plansza[x][y+ para] = "N";
			}
		}
	}


	int rozmieszczanie_statkow(int x, int y, int p, int r) /// zabespieczenie przed stykaniem // i wyjsciem po za mape 
	{
		vector<pair<int, int>>pamieclok;
		int i = x;
		int j = y;
		bool CHECK=true;

		if (p == 0) 
		{
			for (i = x - 1; i <= x + r; i++)
			{
				for (j = y - 1; j <= y + 1; j++) {


					if (Plansza[i][j] != "0")
					{
						CHECK = false;

					}
				}
			}
			
		}
		else
		{
			for (i = x - 1; i <= x + 1; i++)
			{
				for (j = y - 1; j <= y + r; j++) {


					if (Plansza[i][j] != "0")
					{
						
						CHECK = false;
						
					}
				}
			}
		}
		
		if (p == 0 && x < 12-r && CHECK == true)
		{
			for (int para = 0; para < r; para++) {
				wybierz_literke( x,  y,  para,  r,p);
				

				pamieclok.push_back(make_pair(x + para, y));
			}
			pamiec.push_back(pamieclok);
		}
		if (p == 1 && y < 12-r && CHECK == true)
		{
			for (int para = 0; para < r; para++)
			{
				wybierz_literke(x, y, para, r,p);/// RYSUJE NA MAPIE
				pamieclok.push_back(make_pair(x, y + para));/// ZAPISUJE W PAMIECI KOORDYNATY
			}

			pamiec.push_back(pamieclok);
		}
		if ((y >= 12 - r && p == 1) || (x >= 12 - r&& p==0)) //////WARUNEK ABY NIE WYJECHAC PO ZA PLANSZE
		{
			CHECK = 0;
		}

		if (CHECK == 0) 
		{
		
			return 0;
		}
		else
			return 1;

	}

	void zabespieczenie_tworzenie(int rozmiar)// zabespiecznie anty... przy wpisywaniu koordynatow gracza
	{
		int good,good2;
		string polozenie="";
		string kordy = "";
		int p,x, y;
		bool t;

		do 
		{
			do
			{
				t = 0;
				do
				{
					do
					{
						kordy = "";
						cout << " Podaj wspolrzedne.Wzor(A1/J10) ";
						statek(rozmiar);
						cout << endl;
						cin >> kordy;
					} while (kordy.length() == 1 || kordy.length() > 3);
					string litera;
					litera = kordy[0];
					y = konwenter(litera);

				} while (y > 10 || y < 1);
				string n = "";
				string n1 = "";
				n = (kordy[1]);//cyfra musi byc 
				n1 = (kordy[2]);///TRZECIA SLOT CZYLI TYLKO 0

				if (isdigit(n[0]) && (isdigit(n1[0]) || n.length() + n1.length() < 3))
				{
					x = stoi(n + n1);

					if (x > 0 && x < 11)
					{
						if (check(x, y) == 0 )
						{
							
							t = 1;
						}
						else
						{
							cout << "Nie mozesz to same wybierac!" << endl;
						}
					}
					else
					{
						cout << "Liczba z przedzialu 1-10!" << endl;
					}
				}
				else
				{
					cout << "Prosze tez liczbe podac! np A1" << endl;
				}
			} while (t == 0);
			
			do
			{
				cout << "Poziomo czy Pionowo statek umiescic? Wybierz odpowiednio PO / PI ! " << endl;
				cin >> polozenie;
				if (polozenie == "PO" || polozenie == "PI")
				{

					if (polozenie == "PO")
					{
						p = 0;
					}
					else
					{
						p = 1;
					}
					good = 1;
				}
				else {
					good = 0;
				}
			} while (good == 0);

			good2= rozmieszczanie_statkow(x, y, p,rozmiar);
			if (good2 == 0) {
				cout << "Wyszedles po za zakres!" << endl;
			}
		} while (good2 == 0);
		
		showplansza();
	}

	void Tworzenie_gracz()// reczne wpowadzanie statkow o okreslonych wielkosciach
	{
		zabespieczenie_tworzenie(6);
		zabespieczenie_tworzenie(4);
		zabespieczenie_tworzenie(4);
		zabespieczenie_tworzenie(3);
		zabespieczenie_tworzenie(3);
		zabespieczenie_tworzenie(2);
		zabespieczenie_tworzenie(2);
	}
};

class gra 
{
private:
	
	vector<pair<int, int>> strzal_bot;
	bool znalazl = 0;
	int polozenie = 2;//0 poziom 1 pion // 3 nieokreslono jeszcze
	class mapa pustabot;
	class mapa pusta;
	class mapa gracz;
	class mapa bot;
	int strzal[1];

public:

	gra()
	{
		string wybor;
		cout << "Jesli chcesz wygenerowac swoja plansze losowo ... wpisz LOS jesli nie wpisz cokolwiek " << endl;
		cin >> wybor;
		system("cls");
		if (wybor == "LOS") 
		{
			gracz.set_rand_mapa();
		}
		else {
			gracz.showplansza();
			gracz.Tworzenie_gracz();
		}
		system("cls");
		
		
		gracz.showplansza();
		bot.set_rand_mapa();
		cout << endl;
		pusta.showplansza();
		setvector();
		zaladuj_strzal_gracz(0, 0);
	}
	int get_rand4()
	{
		random_device rd;
		std::mt19937 mt(rd());
		std::uniform_int_distribution<std::mt19937::result_type> dist(0, 3);
		return dist(mt);
	}


	void setvector()
	{
		for (int i = 0; i < 4; i++) {
			strzal_bot.push_back(make_pair(0, 0));
		}
	}
	void cleanvector() {

		for (int i = 0; i < 4; i++) 
		{
			strzal_bot[i]=(make_pair(0, 0));
		}

	}


	bool check_zatoniecie(int x, int y, int z = 0)//z to czy tura bot czy gracz////0 - gracz///1 or sth - bot
	{
		vector<pair<int, int>> re_pamiec;
		int k = 1;
		if (z == 1) 
		{
			re_pamiec = gracz.znajdz_w_pamieci(x, y); // zapisane koordynaty topionego statku///
		}
		else
		{
			re_pamiec = bot.znajdz_w_pamieci(x, y); // zapisane koordynaty topionego statku///
		}

		for (size_t i = 0; i < re_pamiec.size(); i++)
		{


			if (z == 1) 
			{


				if (pustabot.check(re_pamiec[i].first, re_pamiec[i].second) == 0)
				{
					k = 0;
				}
			}
			else
			{
				if (pusta.check(re_pamiec[i].first, re_pamiec[i].second) == 0)
				{
					k = 0;
				}
			}
		}

		if (k == 1)
		{
			bool polozenie;
			cout << "ZATOPIONY!" << endl;
			if (re_pamiec[0].first == re_pamiec[1].first)
			{
				polozenie = 0;//pion
			}
			else { polozenie = 1; }//poziomo

			if (polozenie == 0) /////umieszcza pola wokol statku zniszczonego
			{
				for (size_t i = 0; i < re_pamiec.size(); i++)
				{
					for (int I = -1; I < 2; I++)
					{
						for (int j = -1; j < 2; j += 2)
						{	
							if (z == 1) 
							{
								pustabot.setPudlo(re_pamiec[i].first + I, re_pamiec[i].second + j);
								gracz.setPudlo(re_pamiec[i].first + I, re_pamiec[i].second + j);
							}
							else 
							{
								pusta.setPudlo(re_pamiec[i].first + I, re_pamiec[i].second + j);
							}
						}
					}
				}
			}
			else {
				for (size_t i = 0; i < re_pamiec.size(); i++)
				{
					for (int I = -1; I < 2; I++)
					{
						for (int j = -1; j < 2; j += 2)
						{
							if (z == 1)
							{
								pustabot.setPudlo(re_pamiec[i].first + j, re_pamiec[i].second + I);
								gracz.setPudlo(re_pamiec[i].first + j, re_pamiec[i].second + I);
							}
							else 
							{
								pusta.setPudlo(re_pamiec[i].first + j, re_pamiec[i].second + I);
							}
						}
					}
				}
			}
			for (size_t k = 0; k < re_pamiec.size(); k++)
			{
				if (z == 1)
				{
					pustabot.setTraf(re_pamiec[k].first, re_pamiec[k].second);
					gracz.setTraf(re_pamiec[k].first, re_pamiec[k].second);
				}
				else 
				{
					pusta.setTraf(re_pamiec[k].first, re_pamiec[k].second);
				}
			}
		}
		return k;
	}

	void zabespiecz_strzal_gracz()
	{
		string kordy = "";
		int x, y;
		bool t;
		do
		{
			t = 0;
			do
			{
				do
				{
					kordy = "";
					cout << " Podaj wspolrzedne.Wzor(A1/J10). " << endl;
					cin >> kordy;
				} while (kordy.length() == 1 || kordy.length() > 3);
				string litera;
				litera = kordy[0];
				y = gracz.konwenter(litera);

			} while (y > 10 || y < 1);
			string n="";
			string n1 = "";
			n=(kordy[1]);//cyfra musi byc 
			n1=(kordy[2]);///TRZECIA SLOT CZYLI TYLKO 0

			if (isdigit(n[0]) && (isdigit(n1[0]) || n.length()+n1.length() < 3))
			{
				x = stoi(n+n1);

				if (x > 0 && x < 11)
				{
					if (pusta.check(x, y) == 0 || pusta.check(x, y) == 2)//bez powtarzania
					{
						t = 1;
					}
					else
					{
						cout << "Nie mozesz w to samo pole strzelac!" << endl;
					}
				}
				else
				{
					cout << "Liczba z przedzialu 1-10!" << endl;
				}
			}
			else
			{
				cout << "Prosze tez liczbe podac! np A1" << endl;
			}
		} while (t == 0);

		zaladuj_strzal_gracz(x, y);
		
	}
	void zaladuj_strzal_gracz(int x, int y) {

		strzal[0] = x;
		strzal[1] = y;
	}

	int namierzanie_celu() 
	{
		int x, y,z;
		bool t = 0;

		x=strzal_bot[0].first;
		y=strzal_bot[0].second;
		
		do 
		{
			x = strzal_bot[0].first;
			y = strzal_bot[0].second;
			
			z = get_rand4();
			if (z == 0) 
			{
				y++;
			}
			if (z == 1)
			{
				y--;
			}
			if (z == 2)
			{
				x--;
			}
			if (z == 3)
			{
				x++;
			}

			if (pustabot.check(x, y) == 0)// sprawdza w swojej planszy CZY POLE PUSTE
			{
				if (x != 0 && x != 11 && y != 0 && y != 11)
				{
					t = 1;
				}
			}
		} while (t == 0);///dotad wylosowal niestrzelone miejsce w okol celu juz trafionego
		
		if (gracz.check(x, y) == 0) 
		{
			bot_komunikat_pudlo(x, y);
			return(0);
		}
		else 
		{
			strzal_bot[1].first=x;
			strzal_bot[1].second=y;

			if (strzal_bot[0].first == strzal_bot[1].first)
			{
				//pionowo
				polozenie = 1;

			}
			else { polozenie = 0; }
		
			bot_komunikat_traf(x,y);
			
			return(1);
		}
	}
	void bot_komunikat_pudlo(int x, int y)
	{
		Sleep(1000);
		cout << "BOT STRZELA I PUDLUJE! " << gracz.dekonwerter(y) << x << endl<<endl;
		gracz.setPudlo(x, y);
		pustabot.setPudlo(x, y);

		gracz.showplansza();		
		pusta.showplansza();
		cout  << "######################################################################" << endl<<endl;
	}
	void bot_komunikat_traf(int x, int y)
	{
		Sleep(1000);
		cout << "BOT STRZELA I TRAFIA! " << gracz.dekonwerter(y) << x << endl<<endl;
		gracz.setTraf(x, y);
		pustabot.setTraf(x, y);
		znalazl = 1;
		if (check_zatoniecie(x, y, 1) == 1) //IF ZATOPIONE
		{
			polozenie = 2;//nieokreslone
			znalazl = 0;//zapomina o statku
			cleanvector();
		}
		gracz.showplansza();
		
		pusta.showplansza();
		cout <<"######################################################################" << endl<<endl;
	}

	int szukanie_celu_odejmowanie_dodawanie(int Q=1)//Q1 DODAWNIE // odejmowanie cokolwiek innego 
	{
		int x, y,d, c = 0, checkbot, fd = 0;
		x = strzal_bot[0].first;
		y = strzal_bot[0].second;
		do
		{
			if (Q == 1)
			{
				c++;
			}
			else 
			{
				c--;
			}
		
			if (polozenie == 1) //pion
			{
				checkbot = pustabot.check(x, y + c);
				d = y + c;
			}
			else //poziom
			{
				checkbot = pustabot.check(x + c, y);
				d = x + c;
			}

			if (d != 0 && d != 11) //czy odejmie nie wyjdzie po za skale
			{
				if (checkbot == 0) //znajduje nie strzelona koordynate
				{
					if (polozenie == 1) 
					{
						strzal_bot[3].first = x;
						strzal_bot[3].second = d;
					}
					else 
					{
						strzal_bot[3].first = d;
						strzal_bot[3].second = y;
					}
					return(1);
				}
				if (checkbot == 1) //ups pole juz strzelone i puste ..zmieniamy kierunek strzelania
				{
					return(2);
				}
				else {
					fd = 0;
				}
			}
			else //zmienaimy kierunek jest po za skala
			{
				return(2);
			}
		} while (fd == 0);//kolejno dodaje chodzac po x juz wystukanych
		return(1);
	}

	
	void strzelanie_seria() 
	{
		int losowo, c = 0, fd=0;
		losowo=gracz.get_rand2();
		do {
			if (losowo == 0)//dodaje
			{
				c = szukanie_celu_odejmowanie_dodawanie();
				if (c == 2)
				{
					losowo = 2;
				}
				else {
					fd =1;
				}
				
			}
			else//odejmuje 
			{
				c = szukanie_celu_odejmowanie_dodawanie(96);
				if (c == 2)
				{
					losowo = 0;
				}
				else {
					fd = 1;
				}
			}
		} while (fd == 0);
	}

	void botlogic()
	{
	
		bool seria = 0;
		do
		{
			if (checkGAMEOVER(pustabot) == 0)/// jesli bot juz wygral to sie nie uruchamia
			{
				if (znalazl == 0)///strzela na oslep
				{
					zabespiecz_strzal_bot();
					seria = bot_rezultat();

				}
				else ///gdy znalazl cel
				{
			
					if (polozenie == 2)//jeszcze polozenie nie okreslil
					{
						seria = namierzanie_celu();//szuka wokol strzelone miejsca statek
					}
					else
					{
						strzelanie_seria();//znajduje pole do strzelenia obok tego juz strzeloneo
						seria = bot_rezultat(3);
					}
				}
			}
			else 
			{
				seria = 0;
			}
		} while (seria == 1);
	}
	int sasiedstwo(int x, int y)
	{
		int i = 0;

		if(pustabot.check(x+1, y) == 0) { i++; }
		if (pustabot.check(x -1, y) == 0) { i++; }
		if (pustabot.check(x , y-1) == 0) { i++; }
		if (pustabot.check(x , y+1) == 0) { i++; }

		return i;
	}
	int bot_blokada_strzelnia(int x,int y) 
	{
		
		if (pustabot.check(x, y) == 0) 
		{
			if((x==1&&y==1)|| (x == 1 && y == 10)|| (x == 10 && y == 1)|| (x == 10 && y == 10))//krawedzie planszy
			{
				if (sasiedstwo(x, y) == 3 || sasiedstwo(x, y) == 4) {
					return 1;
				}
				else 
					return 0;
			
			}
			if ((x == 1 ||x==10)||((y==1||y==10))) // boki planszy
			{
				if (sasiedstwo(x, y) == 3 || sasiedstwo(x, y) == 4 || sasiedstwo(x, y) == 2) {
					return 1;
				}
				else
					return 0;
			}
			else
			{
				if (sasiedstwo(x, y) > 0) {//srodek planszy
					return 1;
				}
				else 
					return 0;
			}
		}
		else
			return 1;
	}

	void zabespiecz_strzal_bot() 
	{
		bool t=0;
		int x=0, y=0;
		do
		{
			x = bot.get_rand();
			y = bot.get_rand();
			
			if (pustabot.check(x, y) == 0 || pustabot.check(x, y)==2)// sprawdza w swojej planszy
			{
				t = bot_blokada_strzelnia(x, y);
			}
			
		} while (t == 0);
		
		strzal_bot[0] = make_pair(x,y);
		
	}
	bool bot_rezultat(int i=0)
	{
		int x, y, wynik = 5;
		x=strzal_bot[i].first, 
		y=strzal_bot[i].second;
		wynik = gracz.check(x,y);
		
		if (wynik == 0)
		{
			bot_komunikat_pudlo(x, y);
			return 0;
		}
		else 
		{
			bot_komunikat_traf(x, y);
			return 1;
		}
	}

	int rezultat() 
	{
		int wynik;
		wynik = bot.check(strzal[0], strzal[1]);
		if (wynik == 0)
		{
			pusta.setPudlo(strzal[0], strzal[1]);
			system("cls");
			cout << "SPUDLOWALES! " << gracz.dekonwerter(strzal[1]) << strzal[0]<< endl<<endl;
			gracz.showplansza();
			cout << endl;
			pusta.showplansza();
			cout << "######################################################################" << endl;
			return 0;

		}
		else 
		{
			pusta.setTraf(strzal[0], strzal[1]);
			system("cls");
			cout << "TRAFILES! "<<gracz.dekonwerter(strzal[1])<<strzal[0] << endl<<endl;
			
			check_zatoniecie(strzal[0], strzal[1],0);
			gracz.showplansza();
			cout << endl;
			pusta.showplansza();
			cout << "######################################################################" << endl;
			return 1;
		}
	}
	bool checkGAMEOVER(mapa X)
	{
		int k = 0;
		for (int i = 1; i < 11; i++)
		{
			for (int j = 1; j < 11; j++)
			{
				if (X.check(i, j) == 3)
				{
				 k++;
				}
			}
		}
		if (k == 24) 
		{
			return 1;
		}
		else {
			return 0;
		}
	}

	bool gameover()
	{
		if (checkGAMEOVER(pustabot) == 1) {
			cout << "Przegrales!" << endl;
			return 1;
		}
		if (checkGAMEOVER(pusta) == 1){
			cout << "Wygrales!" << endl;
			return 1;
		}
		else return 0;
	}
	
	void przebieg_gry()
	{
		do
		{
			bool seria = 1;
			do
			{
				zabespiecz_strzal_gracz();
				seria = rezultat();
				

			} while (seria == 1 && checkGAMEOVER(pusta) == 0);///sprawdza gameover aby podczas seri nie walnac jeszcze na slepo

			if (checkGAMEOVER(pusta) == 0)/// jesli juz gracz wygral to sie nie uruchamia
			{
			botlogic();
			}
		}while (gameover() == 0);
	}
};

int main()
{
	gra x;
	x.przebieg_gry();

	return 0;
}

